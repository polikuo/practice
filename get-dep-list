#!/bin/sh
# author polikuo
# version 1.4.5
# April 19 2017

. /etc/init.d/tc-functions
useBusybox
unset A APPEND B C COPY2FS D DB DELETE DETECTED_TCZS DIR EXT F FILE KERNELVER LDD_OUT LIBS LIST LO N NEWLINE NF NN NOTFOUND NOT_NEEDED option PROVIDES R RPT RS S SCAN SELF STILL_NOTFOUND TARGET TCEDIR TCZS

showhelp() {
( $C ) && echo -n ${YELLOW} 1>&2
cat << END_HELP 1>&2
Usage: $(basename $0) [-option] your_top_directory [append your list here ...]
  Available Options (Default -ns)
  -a auto check from provides.db
  -c colorful output (same as -cns)
  -d show only detected tczs, without custom extensions (cyan)
  -f show full detected dependencies with ldd (white)
  -h show this helpinfo (yellow)
  -n show dependencies that are not found (red)
  -r show recursively scanned tczs (full)
  -s show detected tczs (short)
END_HELP
( $C ) && echo -n ${NORMAL} 1>&2
exit 1
}

# check if TCZS existed
chkexist() {
  for FILE in $@
  do
    [ -s "$TCEDIR"/optional/"$FILE" ] || {
      ( $C ) && echo -n ${MAGENTA}
      echo $FILE not found or size is zero 1>&2
      echo If you load it elsewhere, please move it and the dep file into your 1>&2
      echo "$TCEDIR""/optional/" 1>&2
      ( $C ) && echo -n ${NORMAL}
      exit 1
    }
  done
}

# check repeated
chkrpt() {
  for RPT in $TCZS
  do
    if [ -s "$TCEDIR"/optional/"$RPT".dep ]
    then
      for DELETE in $(cat "$TCEDIR"/optional/"$RPT".dep)
      do
        DELETE=${DELETE##*/}
        DELETE=${DELETE%.tcz}
        DELETE=${DELETE//KERNEL/$KERNELVER}
        DELETE=${DELETE}".tcz"
        if ( echo "$TCZS" | grep -q "$DELETE" )
        then
          NOT_NEEDED="$NOT_NEEDED"" $DELETE"
        fi
      done
    fi
  done

  LIST="$TCZS"

  for NN in $(echo $NOT_NEEDED | tr ' ' '\n' | sort -u)
  do
    LIST="$(echo "$LIST" | sed "/^$NN$/d")"
  done

  ( $C ) && echo -n ${CYAN}
  echo "${LIST//$KERNELVER.tcz/KERNEL.tcz}"
  ( $C ) && echo -n ${NORMAL}
}

# recursively scan dependencies
rscan() {
  cd $TCEDIR/optional
  echo -e "$@" | awk '
  function awk_scan(name, depfile, line) {
    if (name) {
      sub(/KERNEL/, KERNELVER, name)
      depfile=name".dep"
      printf "%s\n", name
      while (getline line < depfile > 0)
        awk_scan(line)
      close(depfile)
    }
  }
  BEGIN {KERNELVER="'"$KERNELVER"'"}
  {awk_scan($1)}
  '
}

# Options
A=false
B=false
C=false
D=false
F=false
N=false
R=false
S=false
while getopts acdfhnrs option 2> /dev/null
do
  case "$option" in
    a ) A=true;;
    c ) C=true;;
    d ) D=true; B=true;;
    f ) F=true; B=true;;
    h ) showhelp;;
    n ) N=true; B=true;;
    r ) R=true; B=true;;
    s ) S=true; B=true;;
    * ) showhelp;;
  esac
done
( $B ) || { N=true;S=true; }
shift $((OPTIND-1))

# directory to scan
DIR=false
[ -n "$1" ] || showhelp
cd $1 && DIR=true
( $DIR ) || showhelp
shift

# additional custom extensions
NEWLINE="
"
KERNELVER="$(uname -r)"
[ "$#" -ne 0 ] && {
  for EXT in $@
  do
    EXT=${EXT##*/}
    EXT=${EXT%.tcz}
    EXT=${EXT//KERNEL/$KERNELVER}
    EXT=${EXT}".tcz"
    APPEND="$EXT""$NEWLINE""$APPEND"
  done
}

# copy2fs
COPY2FS=false
TCEDIR="$(realpath /etc/sysconfig/tcedir)"
[ -f $TCEDIR/copy2fs.lst ] && {
  ( $C ) && echo -n ${RED} 1>&2
  echo WARNING! copy2fs.lst found in $TCEDIR, please disable it and reboot 1>&2
  ( $C ) && echo -n ${NORMAL} 1>&2
  COPY2FS=true
}
[ -f $TCEDIR/copy2fs.flg ] && {
  ( $C ) && echo -n ${RED} 1>&2
  echo WARNING! copy2fs.flg found in $TCEDIR, please disable it and reboot 1>&2
  ( $C ) && echo -n ${NORMAL} 1>&2
  COPY2FS=true
}
( $COPY2FS ) && exit 1

# main
LDD_OUT="$(find . -not -type d -exec ldd {} + 2> /dev/null)"
LO="$(echo "$LDD_OUT" | cut -d '(' -f 1 | tr -d '[[:blank:]]')"
SELF="$(find . -not -type d -exec sh -c 'basename "$1"' _ {} \;)"
LIBS="$(echo "$LO" | grep '/' | cut -d '>' -f 2 | sort -u)"
( $N ) && NOTFOUND="$(echo "$LO" | grep "notfound$" | sort -u)"

for REMOVE in $SELF
do
  ( $D ) || ( $R ) || ( $S ) && LIBS="$(echo "$LIBS" | grep -v "/$REMOVE$")"
  ( $N ) && NOTFOUND="$(echo "$NOTFOUND" | grep -v "^$REMOVE=>notfound$")"
done
NOTFOUND="$(echo "$NOTFOUND" | cut -d = -f 1)"

( $A ) && {
  DB="provides.db"
  getMirror
  cd "$TCEDIR"
  if zsync -i "$TCEDIR"/"$DB" -q "$MIRROR"/"$DB".zsync
  then
    rm -f "$DB".zs-old
  else
    wget -O "$TCEDIR"/"$DB" "$MIRROR"/"$DB"
  fi
  cd - > /dev/null

  for TARGET in "$NOTFOUND"; do
    PROVIDES="$(awk 'BEGIN {FS="\n";RS=""} /\/'${TARGET}'\n/ || /\/'${TARGET}'$/ {print $1}' "$TCEDIR"/"$DB")"
    if [ "$(echo "$PROVIDES" | wc -l)" -eq 0 ]; then
      STILL_NOTFOUND="$STILL_NOTFOUND""$NEWLINE""$TARGET"
    fi
    if [ "$(echo "$PROVIDES" | wc -l)" -eq 1 ]; then
      APPEND="$PROVIDES""$NEWLINE""$APPEND"
    fi
    if [ "$(echo "$PROVIDES" | wc -l)" -gt 1 ]; then
      FOUNDED_LIST="$FOUNDED_LIST""$NEWLINE""$TARGET found in: $PROVIDES"
    fi
  done
}

DETECTED_TCZS="$(realpath $LIBS 2> /dev/null | grep '^/tmp/tcloop/' | cut -d '/' -f 4 | sort -u | sed 's/$/\.tcz/g')"
SCAN="$APPEND""$DETECTED_TCZS"
( $R ) || ( $S ) && { TCZS="$(for RS in $SCAN; do rscan $RS;done | sort -u)";chkexist "$TCZS"; }

# output
( $D ) && {
  chkexist "$DETECTED_TCZS"
  ( $C ) && echo -n ${CYAN}
  echo "${DETECTED_TCZS//$KERNELVER.tcz/KERNEL.tcz}"
  ( $C ) && echo -n ${NORMAL}
}

( $F ) && {
  echo "$LDD_OUT"
}

( $N ) && [ -n "$NOTFOUND" ] && {
  ( $C ) && echo -n ${RED} 1>&2
  echo These dependencies are missing 1>&2
  echo "$NOTFOUND" 1>&2
  ( $C ) && echo -n ${NORMAL} 1>&2
}

( $R ) && {
  ( $C ) && echo -n ${GREEN}
  echo "${TCZS//$KERNELVER.tcz/KERNEL.tcz}"
  ( $C ) && echo -n ${NORMAL}
}

( $S ) && chkrpt

( $A ) && [ -n "$FOUNDED_LIST" ] && echo "$FOUNDED_LIST"

unset A APPEND B C COPY2FS D DELETE DETECTED_TCZS DIR EXT F FILE KERNELVER LDD_OUT LIBS LIST LO N NEWLINE NF NN NOTFOUND NOT_NEEDED R RPT RS S SCAN SELF TCEDIR TCZS option
